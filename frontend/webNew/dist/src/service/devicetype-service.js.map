{"version":3,"file":"devicetype-service.js","sourceRoot":"","sources":["../../../src/service/devicetype-service.ts"],"names":[],"mappings":"AAAA,qGAAqG;AACrG,OAAO,EAAC,MAAM,EAAE,WAAW,EAAC,MAAM,SAAS,CAAA;AAE3C,OAAO,EAAC,KAAK,EAAC,MAAM,UAAU,CAAA;AAuG9B,KAAK,CAAC,MAAM,CAAC,OAAO,GAAG,oBAAoB,CAAC;KACvC,IAAI,CAAC,QAAQ,CAAC,EAAE;IACb,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAA;IAC5B,OAAO,QAAQ,CAAC,IAAI,EAAE,CAAA;AAC1B,CAAC,CAAC;KACD,IAAI,CAAC,MAAM,CAAC,EAAE;IACX,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;IACnB,KAAK,CAAC,cAAc,CAAC,MAAM,CAAC,IAA4B,CAAC,CAAA;AAC7D,CAAC,CAAC;KACD,KAAK,CAAC,KAAK,CAAC,EAAE;IACX,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;AACxB,CAAC,CAAC,CAAA;AACN,0DAA0D","sourcesContent":["//service should request data implement and export interfaces and provide simple set update functions\r\nimport {config, handleError} from '../base'\r\nimport {Observable} from \"rxjs\"\r\nimport {model} from \"../index\"\r\n\r\n//region devicetype interfaces\r\nexport interface DeviceType{\r\n    type_id: number\r\n    name: string\r\n    image: string\r\n}\r\n\r\nexport interface AudioType extends DeviceType{\r\n    windblocker: boolean\r\n    wireless: boolean\r\n    needsRecorder: boolean\r\n}\r\n\r\nexport interface AudioTypeDTO extends AudioType{}\r\n\r\nexport interface CameraType extends DeviceType{\r\n    sensor: CameraSensor\r\n    resolution: CameraResolution\r\n    mount: LensMount\r\n}\r\nexport interface CameraTypeDTO extends DeviceType{\r\n    sensor_id: number\r\n    resolution_id: number\r\n    mount_id: number\r\n}\r\n\r\nexport interface DroneType extends DeviceType{\r\n    sensor: CameraSensor\r\n    resolution: CameraResolution\r\n    max_range: number\r\n}\r\n\r\nexport interface DroneTypeDTO extends DeviceType{\r\n    sensor_id: number\r\n    resolution_id: number\r\n    max_range: number\r\n}\r\n\r\nexport interface LensType extends DeviceType{\r\n    f_stop: number\r\n    focal_length: number\r\n    lens_mount: LensMount\r\n}\r\n\r\nexport interface LensTypeDTO extends DeviceType{\r\n    f_stop: number\r\n    focal_length: number\r\n    mount_id: number\r\n}\r\n\r\nexport interface LightType extends DeviceType{\r\n    watts: number\r\n    rgb: boolean\r\n    variable_temperature: boolean\r\n}\r\n\r\nexport interface LightTypeDTO extends LightType{}\r\n\r\nexport interface StabilizerType extends DeviceType{\r\n    max_weight: number\r\n    number_of_axis: number\r\n}\r\n\r\nexport interface StabilizerTypeDTO extends StabilizerType{}\r\n\r\nexport interface TripodType extends DeviceType{\r\n    height: number\r\n    head: TripodHead\r\n}\r\n\r\nexport interface TripodTypeDTO extends DeviceType{\r\n    height: number\r\n    head_id: number\r\n}\r\n\r\n//endregion interfaces\r\n\r\n//region devicetype attribute interfaces\r\ninterface DeviceTypeAttribute{\r\n    attribute_id: number\r\n    name: string\r\n    details?: string\r\n}\r\n\r\nexport interface CameraResolution extends DeviceTypeAttribute{\r\n    resolution: string\r\n}\r\n\r\nexport interface CameraSensor extends DeviceTypeAttribute{\r\n    size: string\r\n}\r\n\r\nexport interface LensMount extends DeviceTypeAttribute{\r\n}\r\n\r\nexport interface TripodHead extends DeviceTypeAttribute{\r\n}\r\n//endregion\r\n\r\nexport type DeviceTypeCollection = (AudioType | CameraType | DroneType | LensType | LightType | StabilizerType | TripodType)[]\r\n\r\nfetch(config.api_url + '/devicetype/getall')\r\n    .then(response => {\r\n        handleError(response.status)\r\n        return response.json()\r\n    })\r\n    .then(result => {\r\n        console.log(result)\r\n        model.setDeviceTypes(result.data as DeviceTypeCollection)\r\n    })\r\n    .catch(error => {\r\n        console.error(error)\r\n    })\r\n//index should simply link between components and services"]}