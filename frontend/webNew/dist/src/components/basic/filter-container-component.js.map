{"version":3,"file":"filter-container-component.js","sourceRoot":"","sources":["../../../../src/components/basic/filter-container-component.ts"],"names":[],"mappings":";AAAA,OAAO,EAAC,UAAU,EAAE,IAAI,EAAiB,MAAM,KAAK,CAAA;AACpD,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAC,MAAM,mBAAmB,CAAA;AACzD,OAAO,MAAM,MAAM,+DAA+D,CAAA;AAGlF,MAAM,CAAN,IAAY,gBAEX;AAFD,WAAY,gBAAgB;IACxB,mEAAU,CAAA;AACd,CAAC,EAFW,gBAAgB,KAAhB,gBAAgB,QAE3B;AAUM,IAAM,wBAAwB,GAA9B,MAAM,wBAAyB,SAAQ,UAAU;IAAjD;;QAEH,SAAI,GAAY,aAAa,CAAA;IA6BjC,CAAC;IArBG;;;;OAIG;IACH,YAAY,CAAC,CAAO,EAAE,MAAM;QACxB,MAAM,CAAC,QAAQ,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAA;QAClC,IAAI,IAAI,GAAG,CAAC,CAAC,MAA8B,CAAA;QAC3C,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAU,CAAC,CAAA;IACrC,CAAC;IAED,MAAM;;QACF,OAAO,IAAI,CAAA;qBACE,MAAM;;qCAEU,IAAI,CAAC,IAAI,UAAU,MAAA,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,0CAAE,IAAI;kBACrE,MAAA,IAAI,CAAC,OAAO,CAAC,KAAK,0CAAE,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,+DAA+D;SAC7F,IAAI,CAAA,6BAA6B,CAAC,CAAO,EAAE,EAAE,GAAE,IAAI,CAAC,YAAY,CAAC,CAAC,EAAE,MAAM,CAAC,CAAA,CAAA,CAAC,KAAK,MAAM,CAAC,IAAI,MAAM,CACzG;mBACE,CAAA;IACf,CAAC;CACJ,CAAA;AA7BG;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;sDACI;AAG7B;IADC,QAAQ,EAAE;yDAC8B;AAGzC;IADC,QAAQ,EAAE;uDACE;AARJ,wBAAwB;IADpC,aAAa,CAAC,qBAAqB,CAAC;GACxB,wBAAwB,CA+BpC","sourcesContent":["import {LitElement, html, PropertyValues} from 'lit'\r\nimport {customElement, property} from 'lit/decorators.js'\r\nimport styles from '../../../styles/components/basic/filter-container.styles.scss'\r\nimport Model, {AsyncController} from \"../../model\"\r\n\r\nexport enum FilterOptionType {\r\n    DeviceType,\r\n}\r\n\r\nexport interface FilterOption {\r\n    name: string,\r\n    selected?: boolean,\r\n    type: FilterOptionType,\r\n    id: number\r\n}\r\n\r\n@customElement('cc-filter-container')\r\nexport class FilterContainerComponent extends LitElement {\r\n    @property({type: String})\r\n    name?: string = 'Filterblock'\r\n\r\n    @property()\r\n    options?: AsyncController<FilterOption[]>\r\n\r\n    @property()\r\n    model?: Model\r\n\r\n    /**\r\n     * handles the users click on a filter option, highlights it and //TODO passes it back to the index.js\r\n     * @param e\r\n     * @param option\r\n     */\r\n    selectOption(e:Event, option){\r\n        option.selected = !option.selected\r\n        let elem = e.target as HTMLParagraphElement\r\n        elem.classList.toggle(\"selected\")\r\n    }\r\n\r\n    render() {\r\n        return html`\r\n            <style>${styles}</style>\r\n            <div class=\"filter-block\">\r\n                <p class=\"heading\">${this.name} model:${this.model.deviceTypes[0]?.name}</p>\r\n                ${this.options.value?.map((option) => //loop over all options and map(return/create) an item for each\r\n                        html`<p class=\"option\" @click=\"${(e:Event) => {this.selectOption(e, option)}}\">${option.name}</p>`\r\n                )}\r\n            </div>`\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"cc-filter-container\": FilterContainerComponent\r\n    }\r\n}"]}